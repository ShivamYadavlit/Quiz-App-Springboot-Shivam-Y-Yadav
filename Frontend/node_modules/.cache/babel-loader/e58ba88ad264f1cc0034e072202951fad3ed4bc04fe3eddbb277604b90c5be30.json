{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include JWT token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials)\n};\n\n// Quiz API\nexport const quizAPI = {\n  getAvailableQuizzes: () => api.get('/quiz/available'),\n  getQuiz: id => api.get(`/quiz/${id}`),\n  getQuizQuestions: id => api.get(`/quiz/${id}/questions`),\n  submitQuiz: submission => api.post('/quiz/submit', submission),\n  getQuizResult: id => api.get(`/quiz/results/${id}`),\n  getUserHistory: () => api.get('/quiz/history'),\n  getLeaderboard: quizId => api.get(`/quiz/leaderboard${quizId ? `?quizId=${quizId}` : ''}`)\n};\n\n// Admin API\nexport const adminAPI = {\n  // Quiz Management\n  createQuiz: quizData => api.post('/admin/quizzes', quizData),\n  updateQuiz: (id, quizData) => api.put(`/admin/quizzes/${id}`, quizData),\n  deleteQuiz: id => api.delete(`/admin/quizzes/${id}`),\n  getAllQuizzes: () => api.get('/admin/quizzes'),\n  // Question Management\n  createQuestion: questionData => api.post('/admin/questions', questionData),\n  updateQuestion: (id, questionData) => api.put(`/admin/questions/${id}`, questionData),\n  deleteQuestion: id => api.delete(`/admin/questions/${id}`),\n  getQuestionsByQuiz: quizId => api.get(`/admin/quizzes/${quizId}/questions`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","quizAPI","getAvailableQuizzes","get","getQuiz","id","getQuizQuestions","submitQuiz","submission","getQuizResult","getUserHistory","getLeaderboard","quizId","adminAPI","createQuiz","quizData","updateQuiz","put","deleteQuiz","delete","getAllQuizzes","createQuestion","questionData","updateQuestion","deleteQuestion","getQuestionsByQuiz"],"sources":["D:/aspringboot project/Quiz App/Frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include JWT token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n};\r\n\r\n// Quiz API\r\nexport const quizAPI = {\r\n  getAvailableQuizzes: () => api.get('/quiz/available'),\r\n  getQuiz: (id) => api.get(`/quiz/${id}`),\r\n  getQuizQuestions: (id) => api.get(`/quiz/${id}/questions`),\r\n  submitQuiz: (submission) => api.post('/quiz/submit', submission),\r\n  getQuizResult: (id) => api.get(`/quiz/results/${id}`),\r\n  getUserHistory: () => api.get('/quiz/history'),\r\n  getLeaderboard: (quizId) => api.get(`/quiz/leaderboard${quizId ? `?quizId=${quizId}` : ''}`),\r\n};\r\n\r\n// Admin API\r\nexport const adminAPI = {\r\n  // Quiz Management\r\n  createQuiz: (quizData) => api.post('/admin/quizzes', quizData),\r\n  updateQuiz: (id, quizData) => api.put(`/admin/quizzes/${id}`, quizData),\r\n  deleteQuiz: (id) => api.delete(`/admin/quizzes/${id}`),\r\n  getAllQuizzes: () => api.get('/admin/quizzes'),\r\n  \r\n  // Question Management\r\n  createQuestion: (questionData) => api.post('/admin/questions', questionData),\r\n  updateQuestion: (id, questionData) => api.put(`/admin/questions/${id}`, questionData),\r\n  deleteQuestion: (id) => api.delete(`/admin/questions/${id}`),\r\n  getQuestionsByQuiz: (quizId) => api.get(`/admin/quizzes/${quizId}/questions`),\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}